javascript:(function(){ if (window.__ixlHelperInjected) return; window.__ixlHelperInjected = true; var API_KEY = 'AIzaSyAS8HjnF9tIwMO-7Wuih68ZIw8pTCzRTDQ'; var defaultSettings = { theme: "Midnight", copyKey: "c", toggleKey: "Tab", prependMessage: "You are an expert IXL tutor. Read each question carefully and provide ONLY the exact text of the correct answer choice.\n\nGuidelines:\n- Grammar: Choose the option that follows proper grammar rules\n- Math: Calculate precisely and provide the exact numerical answer or choice text\n- Reading: Answer based on the passage content, not outside knowledge\n- Science: Use scientific facts and principles\n- For yes/no questions: Answer 'yes' or 'no' only\n- For multiple choice: Give the exact text of the correct option\n- For \"select all that apply\" or \"two/three\" answers: List each correct answer on a separate line\n- For table/checklist questions: Identify which rows and columns need to be selected\n- Double-check your reasoning before answering\n\nProvide ONLY the answer text, no explanations.", prependPresets: { "Expert Tutor (Default)": "You are an expert IXL tutor. Read each question carefully and provide ONLY the exact text of the correct answer choice.\n\nGuidelines:\n- Grammar: Choose the option that follows proper grammar rules\n- Math: Calculate precisely and provide the exact numerical answer or choice text\n- Reading: Answer based on the passage content, not outside knowledge\n- Science: Use scientific facts and principles\n- For yes/no questions: Answer 'yes' or 'no' only\n- For multiple choice: Give the exact text of the correct option\n- For \"select all that apply\" or \"two/three\" answers: List each correct answer on a separate line\n- For table/checklist questions: Identify which rows and columns need to be selected\n- Double-check your reasoning before answering\n\nProvide ONLY the answer text, no explanations.", "Simple & Direct": "Answer the question with ONLY the exact text of the correct choice. No explanations.", "Grammar Focus": "You are a grammar expert. Choose the grammatically correct option. For complete sentence questions, pick the sentence that follows proper grammar rules. For run-on questions, identify comma splices and fragments. Answer with only the exact text choice.", "Math Specialist": "STOP. READ CAREFULLY.\n\nFor COMPLEMENTARY angles: Find the angle that adds with the given angle to make 90°.\nFor SUPPLEMENTARY angles: Find the angle that adds with the given angle to make 180°.\nFor VERTICAL angles: Find the angle directly opposite when lines intersect.\n\nLook at the answer choices. Pick the ONE angle name that matches the geometric relationship.\n\nExample: If choices are A, B, C, D and you need complementary to AFB, check which angle forms 90° with AFB.\n\nGive ONLY the letter answer or angle name. Nothing else.", "Reading Comprehension": "Base your answer ONLY on the passage provided. Do not use outside knowledge. Find evidence in the text. For main idea questions, look for the central theme. For detail questions, find specific information. Answer with exact choice text.", "Science Expert": "Use scientific facts and principles. For physics: apply formulas correctly. For biology: use classification and processes. For chemistry: consider reactions and properties. Answer with exact choice text only.", "Test Taking Mode": "Read carefully. Eliminate wrong answers. Look for key words. Double-check your reasoning. Provide ONLY the exact answer text with same capitalization as shown.", "Geometry Expert": "You are solving angle problems. CRITICAL RULES:\n\n1. COMPLEMENTARY = angles that add to 90°\n2. SUPPLEMENTARY = angles that add to 180°\n3. VERTICAL = opposite angles when lines cross\n4. MEASUREMENT = read protractor carefully\n\nFor PROTRACTOR questions:\n- Look at where the angle rays meet the scale\n- Use the correct scale (inner/outer numbers)\n- Give the exact degree number\n\nDO NOT explain. Give ONLY the answer (angle name or degree number).", "Protractor Expert": "PROTRACTOR READING - CRITICAL RULES:\n\n⚠️ MOST IXL PROTRACTORS SHOW ACUTE ANGLES (20°-80°)\n\n1. Find the protractor CENTER (small dot/circle)\n2. Identify the BASELINE ray (usually horizontal or at 0°)\n3. Find where the OTHER ray crosses the NUMBER SCALE\n4. Read the SMALLER number if you see two options\n5. Common angles: 30°, 35°, 45°, 60°, 75°\n\n❌ AVOID: 120°, 135°, 150° (these are usually wrong scale)\n✅ PREFER: Numbers between 20°-80°\n\nGive ONLY the number (like '35').", "Table Expert": "TABLE/CHECKLIST QUESTION EXPERT\n\nFor table questions with checkboxes/radio buttons:\n1. Read each row carefully\n2. Determine which column category each row belongs to\n3. List your answers clearly\n\nFormat your response as:\nRow 1: Column Name\nRow 2: Column Name\nRow 3: Column Name\n\nExample:\nThe king forced colonists to house soldiers: Military\nThe king cut off trade: Economic\nThe king denied trials: Judicial\n\nBe precise and concise.", "Custom": "" }, autoHighlight: false, autoSelect: false, autoSubmit: false, autoDetect: false, selectionDelay: 3, submitDelay: 5, fillInBlank: false, highlightColor: "#00aaff", highlightOpacity: 0.15, rainbowHighlight: false, autoCopy: true, btnPos: { top: "20px", left: "20px" }, panelPos: { top: "85px", left: "20px" }, themes: { Midnight: { bg:"#0a0a0a",surface:"#1a1a1a",elevated:"#2a2a2a",text:"#ffffff",subtext:"#b0b0b0",border:"#333333",accent:"#00d4ff",accentHover:"#33dfff",success:"#00ff88",error:"#ff4444" }, Nord: { bg:"#2e3440",surface:"#3b4252",elevated:"#434c5e",text:"#d8dee9",subtext:"#e5e9f0",border:"#4c566a",accent:"#88c0d0",accentHover:"#8fbcbb",success:"#a3be8c",error:"#bf616a" }, Latte: { bg:"#eff1f5",surface:"#e6e9ef",elevated:"#dce0e8",text:"#4c4f69",subtext:"#5c5f77",border:"#ccd0da",accent:"#1e66f5",accentHover:"#4082f7",success:"#40a02b",error:"#d20f39" }, Ocean: { bg:"#0c1445",surface:"#1a237e",elevated:"#283593",text:"#e8eaf6",subtext:"#c5cae9",border:"#3949ab",accent:"#00bcd4",accentHover:"#26c6da",success:"#4caf50",error:"#f44336" }, Forest: { bg:"#1b2e1b",surface:"#2e4a2e",elevated:"#3d5a3d",text:"#e8f5e8",subtext:"#c8e6c8",border:"#4caf50",accent:"#8bc34a",accentHover:"#9ccc65",success:"#4caf50",error:"#f44336" }, Sunset: { bg:"#2d1b2e",surface:"#4a2c4a",elevated:"#5d3a5d",text:"#f8e8f8",subtext:"#e8c8e8",border:"#9c27b0",accent:"#e91e63",accentHover:"#f06292",success:"#4caf50",error:"#f44336" }, Cyber: { bg:"#0a0a0a",surface:"#1a1a1a",elevated:"#2a2a2a",text:"#00ff00",subtext:"#00cc00",border:"#333333",accent:"#00ffff",accentHover:"#33ffff",success:"#00ff00",error:"#ff0000" }, Royal: { bg:"#1a0d2e",surface:"#2d1b4e",elevated:"#3d2a5d",text:"#f0e6ff",subtext:"#d9c7ff",border:"#6a4c93",accent:"#9c27b0",accentHover:"#ba68c8",success:"#4caf50",error:"#f44336" } } }; var ICONS = { CHAT:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>', SETTINGS:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06-.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>', CLOSE:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>', BACK:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>', SEND:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>', COPY:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>', ATTACH:'<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path></svg>' }; function loadSettings() { var storedSettings = JSON.parse(localStorage.getItem("ixlHelperSettings") || "{}"); return { theme: storedSettings.theme || defaultSettings.theme, copyKey: storedSettings.copyKey || defaultSettings.copyKey, toggleKey: storedSettings.toggleKey || defaultSettings.toggleKey, prependMessage: storedSettings.prependMessage || defaultSettings.prependMessage, prependPresets: storedSettings.prependPresets || defaultSettings.prependPresets, autoHighlight: storedSettings.autoHighlight || defaultSettings.autoHighlight, autoSelect: storedSettings.autoSelect || defaultSettings.autoSelect, autoSubmit: storedSettings.autoSubmit || defaultSettings.autoSubmit, autoDetect: storedSettings.autoDetect || defaultSettings.autoDetect, selectionDelay: storedSettings.selectionDelay || defaultSettings.selectionDelay, submitDelay: storedSettings.submitDelay || defaultSettings.submitDelay, fillInBlank: storedSettings.fillInBlank || defaultSettings.fillInBlank, highlightColor: storedSettings.highlightColor || defaultSettings.highlightColor, highlightOpacity: storedSettings.highlightOpacity !== undefined ? storedSettings.highlightOpacity : defaultSettings.highlightOpacity, rainbowHighlight: storedSettings.rainbowHighlight || defaultSettings.rainbowHighlight, autoCopy: storedSettings.autoCopy !== undefined ? storedSettings.autoCopy : defaultSettings.autoCopy, btnPos: storedSettings.btnPos || defaultSettings.btnPos, panelPos: storedSettings.panelPos || defaultSettings.panelPos, themes: defaultSettings.themes }; } function saveSettings(settings) { localStorage.setItem("ixlHelperSettings", JSON.stringify(settings)); } function main() { var settings = loadSettings(); if (document.body) init(settings); else window.addEventListener("DOMContentLoaded", function () { init(settings); }); } function init(settings) { var host = document.createElement("div"); host.id = "ixl-helper-host"; host.style.zIndex = "2147483647"; document.body.appendChild(host); var shadow = host.attachShadow({ mode: "open" }); ensureGlobalHighlightStyles(settings); var UI = createUI(host, shadow, settings); applyTheme(UI, settings); var sendMessage = createSendMessageFunction(UI, settings); setupEventListeners(UI, settings, sendMessage); initQuestionObserver(UI, settings, sendMessage); } function createUI(host, shadow, settings) { var theme = settings.themes[settings.theme] || defaultSettings.themes.Midnight; var style = document.createElement("style"); style.textContent = getCSS(settings, theme); shadow.appendChild(style); var floatingBtn = document.createElement("button"); floatingBtn.className = "floating-btn"; floatingBtn.innerHTML = ICONS.CHAT; floatingBtn.title = "Open IXL Helper"; shadow.appendChild(floatingBtn); var quickCopyBtn = document.createElement("button"); quickCopyBtn.className = "quick-copy-btn"; quickCopyBtn.innerHTML = ICONS.COPY; quickCopyBtn.title = "Copy Question to AI"; shadow.appendChild(quickCopyBtn); var panel = document.createElement("div"); panel.className = "panel"; panel.innerHTML = getPanelHTML(); shadow.appendChild(panel); var fileInput = document.createElement("input"); fileInput.type = "file"; fileInput.accept = "image/*"; fileInput.style.display = "none"; shadow.appendChild(fileInput); var UI = { shadow: shadow, host: host, style: style, floatingBtn: floatingBtn, quickCopyBtn: quickCopyBtn, panel: panel, fileInput: fileInput, title: panel.querySelector(".panel-title"), closeBtn: panel.querySelector(".close-btn"), settingsBtn: panel.querySelector(".settings-btn"), copyBtn: panel.querySelector(".copy-btn"), autoSelectToggle: panel.querySelector("#auto-select-toggle"), autoSubmitToggle: panel.querySelector("#auto-submit-toggle"), autoHighlightToggle: panel.querySelector("#auto-highlight-toggle"), autoDetectToggle: panel.querySelector("#auto-detect-toggle"), prependMessageInput: panel.querySelector("#prepend-message-input"), selectionDelayInput: panel.querySelector("#selection-delay"), submitDelayInput: panel.querySelector("#submit-delay"), saveBtn: panel.querySelector(".save-btn"), copyrightYear: panel.querySelector("#copyright-year"), messages: panel.querySelector(".chat-messages"), chatInput: panel.querySelector(".chat-input"), sendBtn: panel.querySelector(".send-btn"), attachBtn: panel.querySelector(".attach-btn"), screenshotBtn: panel.querySelector(".screenshot-btn"), imagePreview: panel.querySelector(".image-preview"), themeSelect: panel.querySelector("#theme-select"), fillInBlankToggle: panel.querySelector("#fill-in-blank-toggle"), highlightColorInput: panel.querySelector("#highlight-color"), highlightOpacityInput: panel.querySelector("#highlight-opacity"), rainbowHighlightToggle: panel.querySelector("#rainbow-highlight-toggle"), autoCopyToggle: panel.querySelector("#auto-copy-toggle"), prependPresetSelect: panel.querySelector("#prepend-preset-select") }; floatingBtn.style.top = settings.btnPos.top; floatingBtn.style.left = settings.btnPos.left; quickCopyBtn.style.top = "calc(" + settings.btnPos.top + " + 60px)"; quickCopyBtn.style.left = settings.btnPos.left; panel.style.top = settings.panelPos.top; panel.style.left = settings.panelPos.left; if (settings.panelPos.left === "50%") panel.style.transform = "translate(-50%, -50%) scale(0.95)"; else panel.style.transform = "scale(0.95)"; makeDraggable(floatingBtn, "btnPos", settings, null, [quickCopyBtn]); makeDraggable(panel, "panelPos", settings, panel.querySelector(".panel-header")); return UI; } function createSendMessageFunction(UI, settings) { function sendMessageWithRetries(payload, loadingMessage, retries) { retries = retries || 2; function attempt(retryCount) { var geminiPayload = { contents: [{ parts: [] }] }; if (payload.message) geminiPayload.contents[0].parts.push({ text: payload.message }); if (payload.image) geminiPayload.contents[0].parts.push({ inlineData: { mimeType: "image/png", data: payload.image } }); fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=" + API_KEY, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(geminiPayload) }) .then(function (response) { if (response.status >= 400) throw new Error("HTTP error " + response.status); return response.json(); }) .then(function (data) { var responseText = (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0] && data.candidates[0].content.parts[0].text) || "Error: No response from Gemini"; if (loadingMessage) loadingMessage.querySelector("p").textContent = responseText; showToast(UI, "Answer: " + responseText, "success"); if (settings.autoHighlight) highlightAnswer(UI, responseText, settings); var fillSuccess = fillInTheBlank(UI, responseText, settings); if (settings.autoSelect && !fillSuccess) { var selectionSuccess = selectAnswer(UI, responseText); if (selectionSuccess && settings.autoSubmit) { var delaySeconds = settings.submitDelay || 5; setTimeout(function () { submitAnswer(UI); }, delaySeconds * 1000); } } }) .catch(function (error) { if (retryCount < retries) { if (loadingMessage) loadingMessage.querySelector("p").textContent = "AI is slow, retrying... (" + (retryCount + 1) + ")"; setTimeout(function () { attempt(retryCount + 1); }, 2000 * (retryCount + 1)); } else { var errorMsg = "Error: " + (error.message || "AI failed to respond."); if (loadingMessage) loadingMessage.querySelector("p").textContent = errorMsg; showToast(UI, errorMsg, "error"); } }); } attempt(0); } return function (text, image, isQuickCopy) { isQuickCopy = isQuickCopy || false; var messageText = typeof text === "string" ? text : UI.chatInput.value.trim(); var imageBase64 = typeof image === "string" ? image : UI.attachedImageBase64 || null; if (!messageText && !imageBase64) return; var loadingMessage = null; if (!isQuickCopy) { var dataUrl = imageBase64 ? "data:image/png;base64," + imageBase64 : null; appendMessage(UI, "user", messageText, dataUrl); if (typeof text !== "string") UI.chatInput.value = ""; if (UI.clearImagePreview) UI.clearImagePreview(); scrollMessagesToBottom(UI); loadingMessage = appendMessage(UI, "bot", "● ● ●"); } else { showToast(UI, "Getting answer...", "info"); scrollMessagesToBottom(UI); } sendMessageWithRetries({ message: messageText, image: imageBase64 }, loadingMessage); }; } function setupEventListeners(UI, settings, sendMessage) { UI.sendMessage = sendMessage; var attachedImageBase64 = null; UI.copyrightYear.textContent = new Date().getFullYear(); function togglePanel() { var isOpen = UI.panel.classList.toggle("open"); var transform = UI.panel.style.left === "50%" ? "translate(-50%, -50%)" : ""; UI.panel.style.transform = isOpen ? transform + " scale(1)" : transform + " scale(0.95)"; } UI.clearImagePreview = function () { attachedImageBase64 = null; UI.attachedImageBase64 = null; UI.imagePreview.innerHTML = ""; UI.imagePreview.style.display = "none"; }; function handleImageFile(file) { if (!file || !file.type.startsWith("image/")) return; var reader = new FileReader(); reader.onload = function (e) { var dataUrl = e.target.result; attachedImageBase64 = dataUrl.split(",")[1]; UI.attachedImageBase64 = attachedImageBase64; UI.imagePreview.innerHTML = '<img src="' + dataUrl + '" /><button>&times;</button>'; UI.imagePreview.style.display = "flex"; UI.imagePreview.querySelector("button").onclick = UI.clearImagePreview; }; reader.readAsDataURL(file); } UI.floatingBtn.addEventListener("click", togglePanel); UI.closeBtn.addEventListener("click", togglePanel); UI.quickCopyBtn.addEventListener("click", function () { copyIXLContent(UI, settings, { manual: true }).then(function (questionText) { if (questionText) sendMessage(questionText, null, true); }); }); UI.copyBtn.addEventListener("click", function () { copyIXLContent(UI, settings, { manual: true }).then(function (questionText) { if (questionText && UI.panel.classList.contains("open")) sendMessage(questionText, null); }); }); UI.sendBtn.addEventListener("click", function () { sendMessage(); }); UI.attachBtn.addEventListener("click", function () { UI.fileInput.click(); }); UI.screenshotBtn.addEventListener("click", function () { copyIXLContent(UI, settings, { manual: true }).then(function (questionText) { if (questionText) { var hasVisualElements = document.querySelectorAll('canvas, svg, [class*="protractor"], [class*="ruler"], [class*="graph"]').length > 0; var hasNumberedLabels = document.querySelectorAll('[class*="label"], [class*="number"]').length > 0; var message = "Please analyze this question and provide the answer."; if (hasVisualElements || hasNumberedLabels) { message += "\n\nThis appears to be a visual math problem. Look carefully at:\n"; if (hasVisualElements) message += "- Any geometric shapes, angles, or measurements\n"; if (hasNumberedLabels) message += "- Numbered points, angles, or coordinates\n"; message += "- Protractor readings (common angles: 30°, 35°, 45°, 60°, 75°)\n"; message += "- Angle relationships (complementary=90°, supplementary=180°, vertical=opposite)\n"; } message += "\n\n" + questionText; sendMessage(message, null); } else { showToast(UI, "No question found to analyze", "error"); } }); }); UI.fileInput.addEventListener("change", function (e) { handleImageFile(e.target.files[0]); }); UI.chatInput.addEventListener("paste", function (e) { var file = e.clipboardData && e.clipboardData.files && e.clipboardData.files[0]; if (file) handleImageFile(file); }); UI.chatInput.addEventListener("keydown", function (e) { if (e.key === "Enter" && !e.shiftKey) { e.preventDefault(); sendMessage(); } }); UI.settingsBtn.addEventListener("click", function () { var isSettings = UI.panel.classList.toggle("settings-mode"); UI.title.textContent = isSettings ? "Settings" : "IXL Helper"; UI.settingsBtn.innerHTML = isSettings ? ICONS.BACK : ICONS.SETTINGS; }); UI.themeSelect.innerHTML = Object.keys(settings.themes).map(function (name) { return '<option value="' + name + '">' + name + "</option>"; }).join(""); UI.themeSelect.value = settings.theme; UI.autoHighlightToggle.checked = settings.autoHighlight; UI.autoSelectToggle.checked = settings.autoSelect; UI.autoSubmitToggle.checked = settings.autoSubmit; UI.autoDetectToggle.checked = settings.autoDetect; UI.prependMessageInput.value = settings.prependMessage || ""; UI.selectionDelayInput.value = settings.selectionDelay || 3; UI.submitDelayInput.value = settings.submitDelay || 5; UI.fillInBlankToggle.checked = settings.fillInBlank || false; UI.highlightColorInput.value = settings.highlightColor || "#00aaff"; UI.highlightOpacityInput.value = settings.highlightOpacity !== undefined ? settings.highlightOpacity : 0.15; UI.rainbowHighlightToggle.checked = settings.rainbowHighlight || false; UI.autoCopyToggle.checked = settings.autoCopy !== undefined ? settings.autoCopy : true; UI.prependPresetSelect.innerHTML = Object.keys(settings.prependPresets || defaultSettings.prependPresets).map(function(name) { return '<option value="' + name + '">' + name + '</option>'; }).join(''); var currentPreset = "Custom"; for (var presetName in settings.prependPresets || defaultSettings.prependPresets) { if (settings.prependPresets[presetName] === settings.prependMessage) { currentPreset = presetName; break; } } UI.prependPresetSelect.value = currentPreset; UI.saveBtn.addEventListener("click", function () { var newSettings = { theme: UI.themeSelect.value, autoHighlight: UI.autoHighlightToggle.checked, autoSelect: UI.autoSelectToggle.checked, autoSubmit: UI.autoSubmitToggle.checked, autoDetect: UI.autoDetectToggle.checked, prependMessage: UI.prependMessageInput.value, selectionDelay: parseInt(UI.selectionDelayInput.value) || 3, submitDelay: parseInt(UI.submitDelayInput.value) || 5, fillInBlank: UI.fillInBlankToggle.checked, highlightColor: UI.highlightColorInput.value, highlightOpacity: parseFloat(UI.highlightOpacityInput.value) || 0.15, rainbowHighlight: UI.rainbowHighlightToggle.checked, autoCopy: UI.autoCopyToggle.checked }; var fullSettings = JSON.parse(JSON.stringify(settings)); for (var key in newSettings) fullSettings[key] = newSettings[key]; saveSettings(fullSettings); for (var key in fullSettings) settings[key] = fullSettings[key]; applyTheme(UI, settings); ensureGlobalHighlightStyles(settings); UI.saveBtn.textContent = "Saved!"; if (settings.autoSelect || settings.autoHighlight) showToast(UI, "Automation settings enabled for this session!", "success"); setTimeout(function () { UI.saveBtn.textContent = "Save Changes"; }, 2000); }); document.addEventListener("keydown", function (e) { if (e.target && e.target.closest && e.target.closest("input, textarea, select")) return; if (e.ctrlKey && e.key.toLowerCase() === settings.copyKey.toLowerCase()) { e.preventDefault(); copyIXLContent(UI, settings, { manual: true }).then(function (questionText) { if (questionText) { if (UI.panel.classList.contains("open")) { sendMessage(questionText, null); } else { sendMessage(questionText, null, true); } } }); } if (e.key.toLowerCase() === settings.toggleKey.toLowerCase()) { e.preventDefault(); var isOpen = UI.panel.classList.toggle("open"); var transform = UI.panel.style.left === "50%" ? "translate(-50%, -50%)" : ""; UI.panel.style.transform = isOpen ? transform + " scale(1)" : transform + " scale(0.95)"; } }, true); UI.prependPresetSelect.addEventListener("change", function() { var selectedPreset = UI.prependPresetSelect.value; if (selectedPreset !== "Custom" && settings.prependPresets[selectedPreset]) { UI.prependMessageInput.value = settings.prependPresets[selectedPreset]; } }); } function makeDraggable(el, storageKey, settings, handleEl, followerEls) { followerEls = followerEls || []; var handle = handleEl || el; try { handle.style.cursor = "grab"; } catch (e) {} var startRect, startPos, followerStartRects; function onPointerDown(e) { if (e.target && e.target.closest && e.target.closest("button, input, select, a")) return; e.preventDefault(); startRect = el.getBoundingClientRect(); startPos = { x: (e.clientX || (e.touches && e.touches[0] && e.touches[0].clientX)), y: (e.clientY || (e.touches && e.touches[0] && e.touches[0].clientY)) }; followerStartRects = followerEls.map(function (f) { return f.getBoundingClientRect(); }); function onPointerMove(moveEvent) { var clientX = moveEvent.clientX || (moveEvent.touches && moveEvent.touches[0] && moveEvent.touches[0].clientX); var clientY = moveEvent.clientY || (moveEvent.touches && moveEvent.touches[0] && moveEvent.touches[0].clientY); var deltaX = clientX - startPos.x; var deltaY = clientY - startPos.y; var newX = startRect.left + deltaX; var newY = startRect.top + deltaY; el.style.left = newX + "px"; el.style.top = newY + "px"; followerEls.forEach(function (fel, index) { var followerStartRect = followerStartRects[index]; fel.style.left = (followerStartRect.left + deltaX) + "px"; fel.style.top = (followerStartRect.top + deltaY) + "px"; }); } function onPointerUp(upEvent) { document.removeEventListener("pointermove", onPointerMove); document.removeEventListener("pointerup", onPointerUp); document.removeEventListener("touchmove", onPointerMove); document.removeEventListener("touchend", onPointerUp); try { handle.style.cursor = "grab"; } catch (e) {} settings[storageKey] = { top: el.style.top, left: el.style.left }; saveSettings(settings); } document.addEventListener("pointermove", onPointerMove); document.addEventListener("pointerup", onPointerUp, { once: true }); document.addEventListener("touchmove", onPointerMove, { passive: false }); document.addEventListener("touchend", onPointerUp, { once: true }); try { handle.setPointerCapture && handle.setPointerCapture(e.pointerId); } catch (err) {} } handle.addEventListener("pointerdown", function (e) { onPointerDown(e); }); handle.addEventListener("touchstart", function (e) { onPointerDown(e); }, { passive: false }); } function copyIXLContent(UI, settings, options) { options = options || {}; var manual = options.manual || false; if (manual) showToast(UI, "Scanning question...", "info"); var scope = document.querySelector(".q-content, .question-view, .question-body, section[data-question-id]") || document.querySelector("main") || document.body; if (!scope) { if (manual) showToast(UI, "Could not find question area.", "error"); return Promise.resolve(null); } function cleanText(node) { return node ? getTextWithSpacing(node).replace(/\n\s*\n/g, "\n").replace(/ +/g, " ").trim() : ""; } var clonedScope = scope.cloneNode(true); clonedScope.querySelectorAll('script, style, svg, button, .prompt-section-title, .solution-res, .hint-res, [aria-hidden="true"]').forEach(function (el) { el.remove(); }); var stimulus = clonedScope.querySelector(".stimulus-container, .q-stimulus, .stem, .q-prompt"); var questionText = cleanText(stimulus); var optionsText = ""; var optionsNodes = scope.querySelectorAll('.SelectableTile[role="radio"], .SelectableTile, [data-testid="SelectableTile"], .choices li, .choice-container .choice-cell'); if (optionsNodes.length > 0) optionsText = "\n**Options:**\n" + Array.from(optionsNodes).map(function (opt, i) { return String.fromCharCode(65 + i) + ". " + cleanText(opt); }).join("\n"); if (!questionText.trim()) { questionText = cleanText(clonedScope); optionsText = ""; } if (!questionText.trim()) { if (manual) showToast(UI, "No text found to copy.", "error"); return Promise.resolve(null); } var fullFormattedText = "**Question:**\n" + questionText + optionsText; var finalOutput = (settings.prependMessage || "") + "\n\n" + fullFormattedText; if (settings.autoCopy && navigator.clipboard && navigator.clipboard.writeText) { return navigator.clipboard.writeText(finalOutput).then(function () { if (manual) showToast(UI, "Question copied & sent to AI!", "success"); return finalOutput; }).catch(function () { if (manual) showToast(UI, "Copied to internal buffer (clipboard failed).", "info"); return finalOutput; }); } return Promise.resolve(finalOutput); } function getAnswerChoice(responseText) { if (!responseText) return null; var text = String(responseText).trim(); var lines = text.split('\n').map(function(line) { return line.trim(); }).filter(Boolean); var sentences = text.split(/[.!?]+/).map(function(sentence) { return sentence.trim(); }).filter(Boolean); if (lines.length > 1 || sentences.length > 1) { var selectableTiles = document.querySelectorAll('.SelectableTile[role="radio"], .SelectableTile, [data-testid="SelectableTile"], input[type="radio"], input[type="checkbox"], .radio-button, .checkbox-button, .choiceCell input[type="radio"], .multipleChoiceTable input[type="radio"], .SelectableTile[role="checkbox"]'); var matches = []; var usedTiles = new Set(); for (var i = 0; i < lines.length; i++) { var line = lines[i].toLowerCase(); for (var j = 0; j < selectableTiles.length; j++) { if (usedTiles.has(j)) continue; var tile = selectableTiles[j]; var tileText = (tile.textContent || "").trim().toLowerCase(); if (tileText && calculateSimilarity(line, tileText) > 0.4) { matches.push({ el: tile, letter: null }); usedTiles.add(j); break; } } } if (matches.length > 0) { return matches; } } var patterns = [/(?:^|\b)(?:option|choice|answer|correct(?:\s+option)?)\s*[:\-]?\s*([A-J])\b/i, /\b([A-J])[\)\.\:]/i, /^([A-J])\s*[\-\.]/i]; for (var i = 0; i < patterns.length; i++) { var match = text.match(patterns[i]); if (match && match[1]) { var answerLetter = match[1].toUpperCase(); var answerIndex = answerLetter.charCodeAt(0) - 65; var selectors = ['.SelectableTile[role="radio"]', '.SelectableTile', '[data-testid="SelectableTile"]', '.choices li', '.choice-container .choice-cell']; for (var j = 0; j < selectors.length; j++) { var options = document.querySelectorAll(selectors[j]); if (options.length > answerIndex) return { el: options[answerIndex], letter: answerLetter }; } } } var selectableTiles = document.querySelectorAll('.SelectableTile[role="radio"], .SelectableTile, [data-testid="SelectableTile"], input[type="radio"], input[type="checkbox"], .radio-button, .checkbox-button, .choiceCell input[type="radio"], .multipleChoiceTable input[type="radio"], .SelectableTile[role="checkbox"]'); for (var k = 0; k < selectableTiles.length; k++) { var tile = selectableTiles[k]; var tileText = (tile.textContent || "").trim().toLowerCase(); if (tileText && text.toLowerCase().includes(tileText)) return { el: tile, letter: null }; } return null; } function calculateSimilarity(str1, str2) { var longer = str1.length > str2.length ? str1 : str2; var shorter = str1.length > str2.length ? str2 : str1; if (longer.length === 0) return 1.0; var distance = levenshteinDistance(longer, shorter); return (longer.length - distance) / longer.length; } function levenshteinDistance(str1, str2) { var matrix = []; for (var i = 0; i <= str2.length; i++) { matrix[i] = [i]; } for (var j = 0; j <= str1.length; j++) { matrix[0][j] = j; } for (var i = 1; i <= str2.length; i++) { for (var j = 1; j <= str1.length; j++) { if (str2.charAt(i - 1) === str1.charAt(j - 1)) { matrix[i][j] = matrix[i - 1][j - 1]; } else { matrix[i][j] = Math.min( matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1 ); } } } return matrix[str2.length][str1.length]; } function fillInTheBlank(UI, responseText, settings) { if (!settings.fillInBlank) return false; var fillInputs = document.querySelectorAll('input.fillIn, .old-fi-holder input[type="text"]'); if (fillInputs.length === 0) return false; var patterns = [ /\b([A-J])\b/i, /(\d+(?:\.\d+)?)\s*(?:°|degrees?)?/i, /-?\d+(?:\.\d+)?/g, /"([^"]+)"/, /'([^']+)'/, /^([a-zA-Z\s]+)$/ ]; var values = []; for (var i = 0; i < patterns.length; i++) { var matches = responseText.match(patterns[i]); if (matches) { if (patterns[i].global) { values = values.concat(matches); } else { values.push(matches[1] || matches[0]); } break; } } if (values.length === 0) return false; var filledCount = 0; fillInputs.forEach(function (input, index) { if (index < values.length) { var value = values[index]; input.value = ""; input.focus(); input.value = value; ["input", "change", "blur"].forEach(function (evt) { input.dispatchEvent(new Event(evt, { bubbles: true })); }); filledCount++; } }); if (filledCount > 0) { showToast(UI, "Filled " + filledCount + " blanks!", "success"); return true; } return false; } function highlightAnswer(UI, responseText, settings) { var choice = getAnswerChoice(responseText); if (!choice) return false; document.querySelectorAll(".ixl-highlighted-answer, .ixl-rainbow-highlight").forEach(function (el) { el.classList.remove("ixl-highlighted-answer", "ixl-rainbow-highlight"); if (el._rainbowInterval) { clearInterval(el._rainbowInterval); el._rainbowInterval = null; } }); var choices = Array.isArray(choice) ? choice : [choice]; var currentTheme = settings.themes[settings.theme] || defaultSettings.themes.Midnight; var accentColor = settings.highlightColor || currentTheme.accent; var opacity = settings.highlightOpacity !== undefined ? settings.highlightOpacity : 0.15; function hexToRgba(hex, alpha) { var r = parseInt(hex.slice(1, 3), 16); var g = parseInt(hex.slice(3, 5), 16); var b = parseInt(hex.slice(5, 7), 16); return "rgba(" + r + "," + g + "," + b + "," + alpha + ")"; } choices.forEach(function(choiceItem) { if (!choiceItem || !choiceItem.el) return; var element = choiceItem.el; element.classList.add("ixl-highlighted-answer"); if (settings.rainbowHighlight) { element.classList.add("ixl-rainbow-highlight"); startRainbowHighlight(element); } else { var backgroundColor = hexToRgba(accentColor, opacity); var glowColor = hexToRgba(accentColor, 0.3); element.style.setProperty('outline', accentColor + ' solid 4px', 'important'); element.style.setProperty('outline-offset', '4px', 'important'); element.style.setProperty('border-radius', '12px', 'important'); element.style.setProperty('position', 'relative', 'important'); element.style.setProperty('z-index', '1000', 'important'); element.style.setProperty('pointer-events', 'auto', 'important'); element.style.setProperty('background-color', backgroundColor, 'important'); element.style.setProperty('box-shadow', accentColor + ' 0px 0px 15px, inset ' + accentColor + ' 0px 0px 15px', 'important'); element.style.setProperty('border', '2px solid ' + accentColor, 'important'); element.style.setProperty('transform', 'scale(1.02)', 'important'); element.style.setProperty('filter', 'drop-shadow(0 0 8px ' + glowColor + ')', 'important'); } }); return true; } function startRainbowHighlight(element) { if (element._rainbowInterval) return; var hue = 0; element._rainbowInterval = setInterval(function() { hue = (hue + 2) % 360; var color = 'hsl(' + hue + ', 70%, 50%)'; var backgroundColor = 'hsla(' + hue + ', 70%, 50%, 0.2)'; var glowColor = 'hsla(' + hue + ', 70%, 50%, 0.3)'; element.style.setProperty('outline', color + ' solid 4px', 'important'); element.style.setProperty('background-color', backgroundColor, 'important'); element.style.setProperty('box-shadow', color + ' 0px 0px 15px, inset ' + color + ' 0px 0px 15px', 'important'); element.style.setProperty('border', '2px solid ' + color, 'important'); element.style.setProperty('filter', 'drop-shadow(0 0 8px ' + glowColor + ')', 'important'); }, 50); } function selectAnswer(UI, responseText) { var choice = getAnswerChoice(responseText); if (!choice) return false; var choices = Array.isArray(choice) ? choice : [choice]; var success = false; choices.forEach(function(choiceItem) { if (!choiceItem || !choiceItem.el) return; var element = choiceItem.el; try { element.click(); success = true; } catch (e) { try { element.dispatchEvent(new MouseEvent('click', { bubbles: true })); success = true; } catch (e2) { var xpath = getXPath(element); if (xpath) { try { var result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null); if (result.singleNodeValue) { result.singleNodeValue.click(); success = true; } } catch (e3) {} } } } if (success) { setTimeout(function() { try { element.click(); } catch (e) {} }, 100); } }); return success; } function getXPath(element) { if (element.id) { return '//*[@id="' + element.id + '"]'; } if (element === document.body) { return '/html/body'; } var ix = 0; var siblings = element.parentNode.childNodes; for (var i = 0; i < siblings.length; i++) { var sibling = siblings[i]; if (sibling === element) { return getXPath(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + (ix + 1) + ']'; } if (sibling.nodeType === 1 && sibling.tagName === element.tagName) { ix++; } } } function submitAnswer(UI) { var submitButton = document.querySelector('button.crisp-button'); if (!submitButton) { var allButtons = document.querySelectorAll("button"); submitButton = Array.from(allButtons).find(function (btn) { return btn.textContent && btn.textContent.trim().toLowerCase() === "submit"; }); } if (submitButton) { try { submitButton.click(); } catch (e) { try { var xpath = "/html/body/main/div/article/section[2]/section/div/div[1]/section/div/section/div/button"; var result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null); if (result.singleNodeValue) { result.singleNodeValue.click(); } } catch (e2) { showToast(UI, "Could not submit answer.", "error"); } } } else { showToast(UI, "Could not find submit button.", "error"); } } function initQuestionObserver(UI, settings, sendMessage) { var debounceTimer; var lastQuestionFingerprint = null; function processNewQuestion() { if (!settings.autoDetect) return; copyIXLContent(UI, settings, { manual: false }).then(function (questionText) { if (questionText) sendMessage(questionText, null, true); }); } var observer = new MutationObserver(function () { if (!settings.autoDetect) return; var tiles = document.querySelectorAll('.SelectableTile[role="radio"], .SelectableTile, [data-testid="SelectableTile"]'); if (tiles.length > 0) { var currentFingerprint = Array.from(tiles).map(function (t) { return t.textContent; }).join("").slice(0, 200); if (currentFingerprint && currentFingerprint !== lastQuestionFingerprint) { lastQuestionFingerprint = currentFingerprint; clearTimeout(debounceTimer); debounceTimer = setTimeout(processNewQuestion, 1500); } } }); var targetNode = document.querySelector("main") || document.body; observer.observe(targetNode, { childList: true, subtree: true }); } function ensureGlobalHighlightStyles(settings) { var id = "ixl-helper-global-style"; var style = document.getElementById(id); if (!style) { style = document.createElement("style"); style.id = id; document.head.appendChild(style); } var currentTheme = settings.themes[settings.theme] || defaultSettings.themes.Midnight; var accentColor = settings.highlightColor || currentTheme.accent; function hexToRgba(hex, alpha) { var r = parseInt(hex.slice(1, 3), 16), g = parseInt(hex.slice(3, 5), 16), b = parseInt(hex.slice(5, 7), 16); return "rgba(" + r + "," + g + "," + b + "," + alpha + ")"; } var backgroundColor = hexToRgba(accentColor, 0.15); style.textContent = "@keyframes ixl-pulse{0%{box-shadow:0 0 0 0 " + hexToRgba(accentColor, 0.7) + "}70%{box-shadow:0 0 0 12px transparent}100%{box-shadow:0 0 0 0 transparent}}.ixl-highlighted-answer{outline:3px solid " + accentColor + " !important;outline-offset:4px !important;border-radius:12px !important;animation:ixl-pulse 1.5s infinite !important;background-color:" + backgroundColor + " !important}"; } function appendMessage(UI, role, text, imageUrl) { var messageEl = document.createElement("div"); messageEl.className = "chat-message " + role; if (imageUrl) { var img = document.createElement("img"); img.src = imageUrl; messageEl.appendChild(img); } if (text) { var p = document.createElement("p"); p.textContent = text; messageEl.appendChild(p); } UI.messages.appendChild(messageEl); scrollMessagesToBottom(UI); return messageEl; } function scrollMessagesToBottom(UI){ try { var el = UI.messages; el.scrollTop = el.scrollHeight; requestAnimationFrame(function(){ el.scrollTop = el.scrollHeight; if (el.lastElementChild && el.lastElementChild.scrollIntoView) { el.lastElementChild.scrollIntoView({ block: 'end' }); } }); setTimeout(function(){ el.scrollTop = el.scrollHeight; }, 50); } catch(e) {} } function applyTheme(UI, settings) { var theme = settings.themes[settings.theme] || defaultSettings.themes.Midnight; var root = UI.host.style; for (var key in theme) { try { root.setProperty && root.setProperty("--" + key, theme[key]); } catch (e) {} UI.host.style.setProperty && UI.host.style.setProperty("--" + key, theme[key]); } } var toastTimeout; function showToast(UI, message, type) { type = type || "info"; clearTimeout(toastTimeout); var toast = UI.shadow.querySelector(".toast"); if (!toast) { toast = document.createElement("div"); toast.className = "toast"; UI.shadow.appendChild(toast); } toast.textContent = message; toast.className = "toast show " + type; toastTimeout = setTimeout(function () { toast.classList.remove("show"); }, 5000); } function getPanelHTML() { return '<div class="panel-header"><div class="panel-title">IXL Helper</div><div class="panel-actions"><button class="header-btn copy-btn" title="Copy Question Text">' + ICONS.COPY + '</button><button class="header-btn settings-btn" title="Settings">' + ICONS.SETTINGS + '</button><button class="header-btn close-btn" title="Close">' + ICONS.CLOSE + '</button></div></div><div class="panel-body"><div class="chat-view"><div class="chat-messages"></div></div><div class="settings-view"><div class="row"><label for="theme-select">Theme</label><select id="theme-select"></select></div><div class="row"><label for="prepend-preset-select">Prepend Preset</label><select id="prepend-preset-select"></select></div><div class="row full-width"><label for="prepend-message-input">Prepend Message</label><textarea id="prepend-message-input" rows="4"></textarea></div><div class="switch"><label for="auto-highlight-toggle">Highlight Answer</label><input type="checkbox" id="auto-highlight-toggle" /></div><div class="row"><label for="highlight-color">Highlight Color</label><input type="color" id="highlight-color" class="settings-input-color"></div><div class="switch"><label for="rainbow-highlight-toggle">Rainbow Highlight</label><input type="checkbox" id="rainbow-highlight-toggle" /></div><div class="row"><label for="highlight-opacity">Highlight Opacity</label><input type="range" id="highlight-opacity" class="settings-input-range" min="0" max="1" step="0.05"></div><div class="switch"><label for="auto-select-toggle">Auto-Select Answer</label><input type="checkbox" id="auto-select-toggle" /></div><div class="switch"><label for="auto-submit-toggle">Auto-Submit</label><input type="checkbox" id="auto-submit-toggle" /></div><div class="switch"><label for="auto-detect-toggle">Auto-Detect Questions</label><input type="checkbox" id="auto-detect-toggle" /></div><div class="switch"><label for="fill-in-blank-toggle">Fill-in-the-Blank</label><input type="checkbox" id="fill-in-blank-toggle" /></div><div class="switch"><label for="auto-copy-toggle">Auto-Copy</label><input type="checkbox" id="auto-copy-toggle" /></div><div class="row"><label for="selection-delay">Selection Delay (s)</label><input type="number" id="selection-delay" class="settings-input-short" min="0" max="10" step="1"></div><div class="row"><label for="submit-delay">Submit Delay (s)</label><input type="number" id="submit-delay" class="settings-input-short" min="0" max="15" step="1"></div><button class="save-btn">Save Changes</button><footer class="copyright" style="text-align:center">© <span id="copyright-year"></span> aidenwrld</footer></div></div><div class="panel-footer"><div class="image-preview"></div><div class="chat-input-wrapper"><button class="attach-btn" title="Attach Image">' + ICONS.ATTACH + '</button><button class="screenshot-btn" title="Screenshot"><svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="5" width="18" height="14" rx="2" ry="2"></rect><path d="M8 5l2-2h4l2 2"></path></svg></button><input type="text" class="chat-input" placeholder="Ask a question..." /><button class="send-btn" title="Send">' + ICONS.SEND + '</button></div></div>'; } function getCSS(settings, theme) { return ':host{--bg:' + theme.bg + ';--surface:' + theme.surface + ';--elevated:' + theme.elevated + ';--text:' + theme.text + ';--subtext:' + theme.subtext + ';--border:' + theme.border + ';--accent:' + theme.accent + ';--accent-hover:' + theme.accentHover + ';--success:' + theme.success + ';--error:' + theme.error + ';--font-sans:system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;--shadow-lg:0 10px 15px -3px rgba(0,0,0,0.2), 0 4px 6px -2px rgba(0,0,0,0.1)}*{margin:0;padding:0;box-sizing:border-box;font-family:var(--font-sans)}.floating-btn,.quick-copy-btn{position:fixed;border:none;display:grid;place-items:center;box-shadow:var(--shadow-lg);cursor:grab;transition:transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1), box-shadow 0.2s ease, background-color 0.2s ease}.floating-btn{width:52px;height:52px;border-radius:50%;background-color:var(--accent);color:white}.quick-copy-btn{width:44px;height:44px;border-radius:50%;background-color:var(--surface);color:var(--text);border:1px solid var(--border)}.floating-btn:hover{transform:scale(1.1)}.quick-copy-btn:hover{transform:scale(1.1);background-color:var(--elevated)}.floating-btn svg{width:24px;height:24px}.quick-copy-btn svg{width:20px;height:20}.panel{position:fixed;width:380px;height:540px;background-color:var(--surface);color:var(--text);border-radius:16px;box-shadow:var(--shadow-lg);border:1px solid var(--border);display:flex;flex-direction:column;opacity:0;visibility:hidden;transition:opacity 0.3s ease, transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);transform-origin:top left;-webkit-overflow-scrolling:touch}.panel.open{opacity:1;visibility:visible}.panel-header{display:flex;align-items:center;padding:12px 8px 12px 16px;flex-shrink:0;border-bottom:1px solid var(--border);cursor:grab}.panel-title{font-size:16px;font-weight:600;margin-right:auto}.panel-actions{display:flex;gap:4px}.header-btn{background:none;border:none;color:var(--subtext);width:32px;height:32px;border-radius:8px;cursor:pointer;display:grid;place-items:center;transition:background-color 0.2s, color 0.2s}.header-btn:hover{background:var(--elevated);color:var(--text)}.header-btn svg{width:18px;height:18px}.panel-body{flex:1;display:flex;flex-direction:column;overflow:hidden}.settings-view{display:none;padding:16px;gap:14px;overflow-y:auto;flex-direction:column}.panel.settings-mode .settings-view{display:flex}.panel.settings-mode .chat-view,.panel.settings-mode .panel-footer{display:none}.chat-messages{flex:1;overflow-y:auto;padding:16px;display:flex;flex-direction:column;gap:16px;-webkit-overflow-scrolling:touch}.chat-message p{padding:10px 14px;border-radius:12px;line-height:1.5;white-space:pre-wrap;word-wrap:break-word}.chat-message.user p{background-color:var(--accent);color:white}.chat-message.bot p{background-color:var(--elevated);border:1px solid var(--border)}.panel-footer{padding:8px 16px 12px;border-top:1px solid var(--border)}.chat-input-wrapper{display:flex;align-items:center;background-color:var(--elevated);border-radius:10px;border:1px solid var(--border)}.chat-input{flex:1;background:none;border:none;outline:none;padding:12px;font-size:15px;color:var(--text)}.attach-btn,.send-btn,.screenshot-btn{background:none;border:none;color:var(--subtext);width:40px;height:40px;cursor:pointer;display:grid;place-items:center;transition:color 0.2s}.attach-btn svg,.screenshot-btn svg{width:18px;height:18px}.send-btn svg{width:20px;height:20}.attach-btn:hover,.send-btn:hover,.screenshot-btn:hover{color:var(--accent)}.row,.switch{display:flex;align-items:center;justify-content:space-between}.row.full-width{flex-direction:column;align-items:flex-start;gap:6px}label{font-size:14px;font-weight:500;color:var(--text)}select,textarea,.settings-input-short{background-color:var(--elevated);border:1px solid var(--border);border-radius:8px;padding:8px 12px;color:var(--text)}.settings-input-short{width:80px;text-align:center}.settings-input-color{padding:2px;width:40px;height:30px;border-radius:6px}.settings-input-range{width:120px;height:6px;background:var(--elevated);border-radius:3px;outline:none;appearance:none}.settings-input-range::-webkit-slider-thumb{appearance:none;width:18px;height:18px;background:var(--accent);border-radius:50%;cursor:pointer}.settings-input-range::-moz-range-thumb{width:18px;height:18px;background:var(--accent);border-radius:50%;cursor:pointer;border:none}textarea{width:100%;resize:vertical}.switch input{appearance:none;width:44px;height:24px;background:var(--elevated);border-radius:99px;position:relative;cursor:pointer;border:1px solid var(--border)}.switch input::after{content:"";position:absolute;width:18px;height:18px;background:white;border-radius:50%;top:2px;left:2px;transition:0.2s}.switch input:checked{background:var(--accent);border-color:var(--accent)}.switch input:checked::after{transform:translateX(20px)}.save-btn{height:44px;background-color:var(--accent);color:white;border:none;border-radius:8px;font-size:15px;font-weight:500;cursor:pointer;margin-top:10px}.copyright a{color:var(--accent);text-decoration:none}.copyright a:hover{text-decoration:underline}.toast{position:fixed;bottom:30px;left:50%;transform:translate(-50%, 150%);background-color:var(--elevated);color:var(--text);padding:14px 22px;border-radius:12px;box-shadow:var(--shadow-lg);border:1px solid var(--border);opacity:0;transition:all 0.4s cubic-bezier(0.2, 1, 0.2, 1);z-index:2147483647;max-width:80%;text-align:center}.toast.show{opacity:1;transform:translate(-50%, 0)}.toast.success{background-color:var(--success);color:white;border-color:transparent}.toast.error{background-color:var(--error);color:white;border-color:transparent}'; } function getTextWithSpacing(node) { if (!node) return ""; if (node.nodeType === Node.TEXT_NODE) return node.textContent; if (node.nodeType !== Node.ELEMENT_NODE) return ""; var style = window.getComputedStyle(node); var isBlock = (style && style.display && style.display.indexOf("block") !== -1) || style.display === "list-item"; var text = ""; for (var i = 0; i < node.childNodes.length; i++) { text += getTextWithSpacing(node.childNodes[i]); if (isBlock && i !== node.childNodes.length - 1) text += "\n"; } return text; } try { main(); } catch (e) { console.error("IXL Helper failed to initialize:", e); } })();
